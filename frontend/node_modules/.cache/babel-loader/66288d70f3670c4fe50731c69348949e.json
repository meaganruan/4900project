{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.toBeChecked = toBeChecked;\n\nvar _ariaQuery = require(\"aria-query\");\n\nvar _utils = require(\"./utils\");\n\nfunction toBeChecked(element) {\n  (0, _utils.checkHtmlElement)(element, toBeChecked, this);\n\n  const isValidInput = () => {\n    return element.tagName.toLowerCase() === 'input' && ['checkbox', 'radio'].includes(element.type);\n  };\n\n  const isValidAriaElement = () => {\n    return roleSupportsChecked(element.getAttribute('role')) && ['true', 'false'].includes(element.getAttribute('aria-checked'));\n  };\n\n  if (!isValidInput() && !isValidAriaElement()) {\n    return {\n      pass: false,\n      message: () => `only inputs with type=\"checkbox\" or type=\"radio\" or elements with ${supportedRolesSentence()} and a valid aria-checked attribute can be used with .toBeChecked(). Use .toHaveValue() instead`\n    };\n  }\n\n  const isChecked = () => {\n    if (isValidInput()) return element.checked;\n    return element.getAttribute('aria-checked') === 'true';\n  };\n\n  return {\n    pass: isChecked(),\n    message: () => {\n      const is = isChecked() ? 'is' : 'is not';\n      return [this.utils.matcherHint(`${this.isNot ? '.not' : ''}.toBeChecked`, 'element', ''), '', `Received element ${is} checked:`, `  ${this.utils.printReceived(element.cloneNode(false))}`].join('\\n');\n    }\n  };\n}\n\nfunction supportedRolesSentence() {\n  return (0, _utils.toSentence)(supportedRoles().map(role => `role=\"${role}\"`), {\n    lastWordConnector: ' or '\n  });\n}\n\nfunction supportedRoles() {\n  return _ariaQuery.roles.keys().filter(roleSupportsChecked);\n}\n\nfunction roleSupportsChecked(role) {\n  var _roles$get;\n\n  return ((_roles$get = _ariaQuery.roles.get(role)) == null ? void 0 : _roles$get.props['aria-checked']) !== undefined;\n}","map":{"version":3,"sources":["/Users/meaganruan/4900project/evently/node_modules/@testing-library/jest-dom/dist/to-be-checked.js"],"names":["Object","defineProperty","exports","value","toBeChecked","_ariaQuery","require","_utils","element","checkHtmlElement","isValidInput","tagName","toLowerCase","includes","type","isValidAriaElement","roleSupportsChecked","getAttribute","pass","message","supportedRolesSentence","isChecked","checked","is","utils","matcherHint","isNot","printReceived","cloneNode","join","toSentence","supportedRoles","map","role","lastWordConnector","roles","keys","filter","_roles$get","get","props","undefined"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,WAAR,GAAsBA,WAAtB;;AAEA,IAAIC,UAAU,GAAGC,OAAO,CAAC,YAAD,CAAxB;;AAEA,IAAIC,MAAM,GAAGD,OAAO,CAAC,SAAD,CAApB;;AAEA,SAASF,WAAT,CAAqBI,OAArB,EAA8B;AAC5B,GAAC,GAAGD,MAAM,CAACE,gBAAX,EAA6BD,OAA7B,EAAsCJ,WAAtC,EAAmD,IAAnD;;AAEA,QAAMM,YAAY,GAAG,MAAM;AACzB,WAAOF,OAAO,CAACG,OAAR,CAAgBC,WAAhB,OAAkC,OAAlC,IAA6C,CAAC,UAAD,EAAa,OAAb,EAAsBC,QAAtB,CAA+BL,OAAO,CAACM,IAAvC,CAApD;AACD,GAFD;;AAIA,QAAMC,kBAAkB,GAAG,MAAM;AAC/B,WAAOC,mBAAmB,CAACR,OAAO,CAACS,YAAR,CAAqB,MAArB,CAAD,CAAnB,IAAqD,CAAC,MAAD,EAAS,OAAT,EAAkBJ,QAAlB,CAA2BL,OAAO,CAACS,YAAR,CAAqB,cAArB,CAA3B,CAA5D;AACD,GAFD;;AAIA,MAAI,CAACP,YAAY,EAAb,IAAmB,CAACK,kBAAkB,EAA1C,EAA8C;AAC5C,WAAO;AACLG,MAAAA,IAAI,EAAE,KADD;AAELC,MAAAA,OAAO,EAAE,MAAO,qEAAoEC,sBAAsB,EAAG;AAFxG,KAAP;AAID;;AAED,QAAMC,SAAS,GAAG,MAAM;AACtB,QAAIX,YAAY,EAAhB,EAAoB,OAAOF,OAAO,CAACc,OAAf;AACpB,WAAOd,OAAO,CAACS,YAAR,CAAqB,cAArB,MAAyC,MAAhD;AACD,GAHD;;AAKA,SAAO;AACLC,IAAAA,IAAI,EAAEG,SAAS,EADV;AAELF,IAAAA,OAAO,EAAE,MAAM;AACb,YAAMI,EAAE,GAAGF,SAAS,KAAK,IAAL,GAAY,QAAhC;AACA,aAAO,CAAC,KAAKG,KAAL,CAAWC,WAAX,CAAwB,GAAE,KAAKC,KAAL,GAAa,MAAb,GAAsB,EAAG,cAAnD,EAAkE,SAAlE,EAA6E,EAA7E,CAAD,EAAmF,EAAnF,EAAwF,oBAAmBH,EAAG,WAA9G,EAA2H,KAAI,KAAKC,KAAL,CAAWG,aAAX,CAAyBnB,OAAO,CAACoB,SAAR,CAAkB,KAAlB,CAAzB,CAAmD,EAAlL,EAAqLC,IAArL,CAA0L,IAA1L,CAAP;AACD;AALI,GAAP;AAOD;;AAED,SAAST,sBAAT,GAAkC;AAChC,SAAO,CAAC,GAAGb,MAAM,CAACuB,UAAX,EAAuBC,cAAc,GAAGC,GAAjB,CAAqBC,IAAI,IAAK,SAAQA,IAAK,GAA3C,CAAvB,EAAuE;AAC5EC,IAAAA,iBAAiB,EAAE;AADyD,GAAvE,CAAP;AAGD;;AAED,SAASH,cAAT,GAA0B;AACxB,SAAO1B,UAAU,CAAC8B,KAAX,CAAiBC,IAAjB,GAAwBC,MAAxB,CAA+BrB,mBAA/B,CAAP;AACD;;AAED,SAASA,mBAAT,CAA6BiB,IAA7B,EAAmC;AACjC,MAAIK,UAAJ;;AAEA,SAAO,CAAC,CAACA,UAAU,GAAGjC,UAAU,CAAC8B,KAAX,CAAiBI,GAAjB,CAAqBN,IAArB,CAAd,KAA6C,IAA7C,GAAoD,KAAK,CAAzD,GAA6DK,UAAU,CAACE,KAAX,CAAiB,cAAjB,CAA9D,MAAoGC,SAA3G;AACD","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.toBeChecked = toBeChecked;\n\nvar _ariaQuery = require(\"aria-query\");\n\nvar _utils = require(\"./utils\");\n\nfunction toBeChecked(element) {\n  (0, _utils.checkHtmlElement)(element, toBeChecked, this);\n\n  const isValidInput = () => {\n    return element.tagName.toLowerCase() === 'input' && ['checkbox', 'radio'].includes(element.type);\n  };\n\n  const isValidAriaElement = () => {\n    return roleSupportsChecked(element.getAttribute('role')) && ['true', 'false'].includes(element.getAttribute('aria-checked'));\n  };\n\n  if (!isValidInput() && !isValidAriaElement()) {\n    return {\n      pass: false,\n      message: () => `only inputs with type=\"checkbox\" or type=\"radio\" or elements with ${supportedRolesSentence()} and a valid aria-checked attribute can be used with .toBeChecked(). Use .toHaveValue() instead`\n    };\n  }\n\n  const isChecked = () => {\n    if (isValidInput()) return element.checked;\n    return element.getAttribute('aria-checked') === 'true';\n  };\n\n  return {\n    pass: isChecked(),\n    message: () => {\n      const is = isChecked() ? 'is' : 'is not';\n      return [this.utils.matcherHint(`${this.isNot ? '.not' : ''}.toBeChecked`, 'element', ''), '', `Received element ${is} checked:`, `  ${this.utils.printReceived(element.cloneNode(false))}`].join('\\n');\n    }\n  };\n}\n\nfunction supportedRolesSentence() {\n  return (0, _utils.toSentence)(supportedRoles().map(role => `role=\"${role}\"`), {\n    lastWordConnector: ' or '\n  });\n}\n\nfunction supportedRoles() {\n  return _ariaQuery.roles.keys().filter(roleSupportsChecked);\n}\n\nfunction roleSupportsChecked(role) {\n  var _roles$get;\n\n  return ((_roles$get = _ariaQuery.roles.get(role)) == null ? void 0 : _roles$get.props['aria-checked']) !== undefined;\n}"]},"metadata":{},"sourceType":"script"}