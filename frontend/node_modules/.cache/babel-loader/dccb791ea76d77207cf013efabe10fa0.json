{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.toHaveAccessibleName = toHaveAccessibleName;\n\nvar _domAccessibilityApi = require(\"dom-accessibility-api\");\n\nvar _utils = require(\"./utils\");\n\nfunction toHaveAccessibleName(htmlElement, expectedAccessibleName) {\n  (0, _utils.checkHtmlElement)(htmlElement, toHaveAccessibleName, this);\n  const actualAccessibleName = (0, _domAccessibilityApi.computeAccessibleName)(htmlElement);\n  const missingExpectedValue = arguments.length === 1;\n  let pass = false;\n\n  if (missingExpectedValue) {\n    // When called without an expected value we only want to validate that the element has an\n    // accessible name, whatever it may be.\n    pass = actualAccessibleName !== '';\n  } else {\n    pass = expectedAccessibleName instanceof RegExp ? expectedAccessibleName.test(actualAccessibleName) : this.equals(actualAccessibleName, expectedAccessibleName);\n  }\n\n  return {\n    pass,\n    message: () => {\n      const to = this.isNot ? 'not to' : 'to';\n      return (0, _utils.getMessage)(this, this.utils.matcherHint(`${this.isNot ? '.not' : ''}.${toHaveAccessibleName.name}`, 'element', ''), `Expected element ${to} have accessible name`, expectedAccessibleName, 'Received', actualAccessibleName);\n    }\n  };\n}","map":{"version":3,"sources":["/Users/meaganruan/4900project/evently/node_modules/@testing-library/jest-dom/dist/to-have-accessible-name.js"],"names":["Object","defineProperty","exports","value","toHaveAccessibleName","_domAccessibilityApi","require","_utils","htmlElement","expectedAccessibleName","checkHtmlElement","actualAccessibleName","computeAccessibleName","missingExpectedValue","arguments","length","pass","RegExp","test","equals","message","to","isNot","getMessage","utils","matcherHint","name"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,oBAAR,GAA+BA,oBAA/B;;AAEA,IAAIC,oBAAoB,GAAGC,OAAO,CAAC,uBAAD,CAAlC;;AAEA,IAAIC,MAAM,GAAGD,OAAO,CAAC,SAAD,CAApB;;AAEA,SAASF,oBAAT,CAA8BI,WAA9B,EAA2CC,sBAA3C,EAAmE;AACjE,GAAC,GAAGF,MAAM,CAACG,gBAAX,EAA6BF,WAA7B,EAA0CJ,oBAA1C,EAAgE,IAAhE;AACA,QAAMO,oBAAoB,GAAG,CAAC,GAAGN,oBAAoB,CAACO,qBAAzB,EAAgDJ,WAAhD,CAA7B;AACA,QAAMK,oBAAoB,GAAGC,SAAS,CAACC,MAAV,KAAqB,CAAlD;AACA,MAAIC,IAAI,GAAG,KAAX;;AAEA,MAAIH,oBAAJ,EAA0B;AACxB;AACA;AACAG,IAAAA,IAAI,GAAGL,oBAAoB,KAAK,EAAhC;AACD,GAJD,MAIO;AACLK,IAAAA,IAAI,GAAGP,sBAAsB,YAAYQ,MAAlC,GAA2CR,sBAAsB,CAACS,IAAvB,CAA4BP,oBAA5B,CAA3C,GAA+F,KAAKQ,MAAL,CAAYR,oBAAZ,EAAkCF,sBAAlC,CAAtG;AACD;;AAED,SAAO;AACLO,IAAAA,IADK;AAELI,IAAAA,OAAO,EAAE,MAAM;AACb,YAAMC,EAAE,GAAG,KAAKC,KAAL,GAAa,QAAb,GAAwB,IAAnC;AACA,aAAO,CAAC,GAAGf,MAAM,CAACgB,UAAX,EAAuB,IAAvB,EAA6B,KAAKC,KAAL,CAAWC,WAAX,CAAwB,GAAE,KAAKH,KAAL,GAAa,MAAb,GAAsB,EAAG,IAAGlB,oBAAoB,CAACsB,IAAK,EAAhF,EAAmF,SAAnF,EAA8F,EAA9F,CAA7B,EAAiI,oBAAmBL,EAAG,uBAAvJ,EAA+KZ,sBAA/K,EAAuM,UAAvM,EAAmNE,oBAAnN,CAAP;AACD;AALI,GAAP;AAOD","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.toHaveAccessibleName = toHaveAccessibleName;\n\nvar _domAccessibilityApi = require(\"dom-accessibility-api\");\n\nvar _utils = require(\"./utils\");\n\nfunction toHaveAccessibleName(htmlElement, expectedAccessibleName) {\n  (0, _utils.checkHtmlElement)(htmlElement, toHaveAccessibleName, this);\n  const actualAccessibleName = (0, _domAccessibilityApi.computeAccessibleName)(htmlElement);\n  const missingExpectedValue = arguments.length === 1;\n  let pass = false;\n\n  if (missingExpectedValue) {\n    // When called without an expected value we only want to validate that the element has an\n    // accessible name, whatever it may be.\n    pass = actualAccessibleName !== '';\n  } else {\n    pass = expectedAccessibleName instanceof RegExp ? expectedAccessibleName.test(actualAccessibleName) : this.equals(actualAccessibleName, expectedAccessibleName);\n  }\n\n  return {\n    pass,\n    message: () => {\n      const to = this.isNot ? 'not to' : 'to';\n      return (0, _utils.getMessage)(this, this.utils.matcherHint(`${this.isNot ? '.not' : ''}.${toHaveAccessibleName.name}`, 'element', ''), `Expected element ${to} have accessible name`, expectedAccessibleName, 'Received', actualAccessibleName);\n    }\n  };\n}"]},"metadata":{},"sourceType":"script"}