{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.toHaveTextContent = toHaveTextContent;\n\nvar _utils = require(\"./utils\");\n\nfunction toHaveTextContent(node, checkWith) {\n  let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {\n    normalizeWhitespace: true\n  };\n  (0, _utils.checkNode)(node, toHaveTextContent, this);\n  const textContent = options.normalizeWhitespace ? (0, _utils.normalize)(node.textContent) : node.textContent.replace(/\\u00a0/g, ' '); // Replace &nbsp; with normal spaces\n\n  const checkingWithEmptyString = textContent !== '' && checkWith === '';\n  return {\n    pass: !checkingWithEmptyString && (0, _utils.matches)(textContent, checkWith),\n    message: () => {\n      const to = this.isNot ? 'not to' : 'to';\n      return (0, _utils.getMessage)(this, this.utils.matcherHint(`${this.isNot ? '.not' : ''}.toHaveTextContent`, 'element', ''), checkingWithEmptyString ? `Checking with empty string will always match, use .toBeEmptyDOMElement() instead` : `Expected element ${to} have text content`, checkWith, 'Received', textContent);\n    }\n  };\n}","map":{"version":3,"sources":["/Users/meaganruan/4900project/evently/node_modules/@testing-library/jest-dom/dist/to-have-text-content.js"],"names":["Object","defineProperty","exports","value","toHaveTextContent","_utils","require","node","checkWith","options","normalizeWhitespace","checkNode","textContent","normalize","replace","checkingWithEmptyString","pass","matches","message","to","isNot","getMessage","utils","matcherHint"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,iBAAR,GAA4BA,iBAA5B;;AAEA,IAAIC,MAAM,GAAGC,OAAO,CAAC,SAAD,CAApB;;AAEA,SAASF,iBAAT,CAA2BG,IAA3B,EAAiCC,SAAjC,EAEG;AAAA,MAFyCC,OAEzC,uEAFmD;AACpDC,IAAAA,mBAAmB,EAAE;AAD+B,GAEnD;AACD,GAAC,GAAGL,MAAM,CAACM,SAAX,EAAsBJ,IAAtB,EAA4BH,iBAA5B,EAA+C,IAA/C;AACA,QAAMQ,WAAW,GAAGH,OAAO,CAACC,mBAAR,GAA8B,CAAC,GAAGL,MAAM,CAACQ,SAAX,EAAsBN,IAAI,CAACK,WAA3B,CAA9B,GAAwEL,IAAI,CAACK,WAAL,CAAiBE,OAAjB,CAAyB,SAAzB,EAAoC,GAApC,CAA5F,CAFC,CAEqI;;AAEtI,QAAMC,uBAAuB,GAAGH,WAAW,KAAK,EAAhB,IAAsBJ,SAAS,KAAK,EAApE;AACA,SAAO;AACLQ,IAAAA,IAAI,EAAE,CAACD,uBAAD,IAA4B,CAAC,GAAGV,MAAM,CAACY,OAAX,EAAoBL,WAApB,EAAiCJ,SAAjC,CAD7B;AAELU,IAAAA,OAAO,EAAE,MAAM;AACb,YAAMC,EAAE,GAAG,KAAKC,KAAL,GAAa,QAAb,GAAwB,IAAnC;AACA,aAAO,CAAC,GAAGf,MAAM,CAACgB,UAAX,EAAuB,IAAvB,EAA6B,KAAKC,KAAL,CAAWC,WAAX,CAAwB,GAAE,KAAKH,KAAL,GAAa,MAAb,GAAsB,EAAG,oBAAnD,EAAwE,SAAxE,EAAmF,EAAnF,CAA7B,EAAqHL,uBAAuB,GAAI,kFAAJ,GAAyF,oBAAmBI,EAAG,oBAA3P,EAAgRX,SAAhR,EAA2R,UAA3R,EAAuSI,WAAvS,CAAP;AACD;AALI,GAAP;AAOD","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.toHaveTextContent = toHaveTextContent;\n\nvar _utils = require(\"./utils\");\n\nfunction toHaveTextContent(node, checkWith, options = {\n  normalizeWhitespace: true\n}) {\n  (0, _utils.checkNode)(node, toHaveTextContent, this);\n  const textContent = options.normalizeWhitespace ? (0, _utils.normalize)(node.textContent) : node.textContent.replace(/\\u00a0/g, ' '); // Replace &nbsp; with normal spaces\n\n  const checkingWithEmptyString = textContent !== '' && checkWith === '';\n  return {\n    pass: !checkingWithEmptyString && (0, _utils.matches)(textContent, checkWith),\n    message: () => {\n      const to = this.isNot ? 'not to' : 'to';\n      return (0, _utils.getMessage)(this, this.utils.matcherHint(`${this.isNot ? '.not' : ''}.toHaveTextContent`, 'element', ''), checkingWithEmptyString ? `Checking with empty string will always match, use .toBeEmptyDOMElement() instead` : `Expected element ${to} have text content`, checkWith, 'Received', textContent);\n    }\n  };\n}"]},"metadata":{},"sourceType":"script"}